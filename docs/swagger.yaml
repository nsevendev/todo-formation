definitions:
  auth.UserCreateDto:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  auth.UserDeleteDto:
    properties:
      ids:
        items:
          type: string
        type: array
    required:
    - ids
    type: object
  auth.UserLoginDto:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  ginresponse.JsonFormatterSwag:
    properties:
      data:
        type: object
      error:
        type: object
      message:
        type: string
      meta:
        $ref: '#/definitions/ginresponse.JsonSwagMeta'
    type: object
  ginresponse.JsonSwagMeta:
    properties:
      method:
        type: string
      path:
        type: string
      status:
        type: integer
      timestamp:
        type: string
    type: object
  task.TaskCreateDto:
    properties:
      label:
        type: string
    required:
    - label
    type: object
  task.TaskDeleteManyDto:
    properties:
      ids:
        items:
          type: string
        type: array
    required:
    - ids
    type: object
  task.TaskUpdateLabelDto:
    properties:
      label:
        type: string
    required:
    - label
    type: object
info:
  contact: {}
  description: 'API pour créer des todo avec utilisateurs. Pour tester les routes
    protégées, cliquez sur le bouton Authorize et saisissez : Bearer {votre token}
    (remplacez {votre token} par un token valide obtenu via la route /user/login).'
  title: API todo-formation
  version: "1.0"
paths:
  /task:
    get:
      description: Récupére les tasks crée par l'utilisateur authentifié via le token
        dans le header
      produces:
      - application/json
      responses:
        "200":
          description: Tâches récupérées avec succès
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "401":
          description: Invalide token
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "500":
          description: Erreur interne
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
      security:
      - BearerAuth: []
      summary: Récupérer toutes les tasks de l'utilisateur connecté
      tags:
      - task
    post:
      consumes:
      - application/json
      description: Création d’une nouvelle task pour l'utilisateur connecté
      parameters:
      - description: DTO de création de la task
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/task.TaskCreateDto'
      produces:
      - application/json
      responses:
        "201":
          description: Tâche créée avec succès
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "401":
          description: Token invalide
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "500":
          description: Erreur interne
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
      security:
      - BearerAuth: []
      summary: Créer une task
      tags:
      - task
  /task/{id}/done/user:
    put:
      description: Met à jour la propriété `done` de la task indiquée appartenant
        à l'utilisateur authentifié via le token dans le header
      parameters:
      - description: ID de la task à modifier
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tâche mise à jour avec succès
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "401":
          description: Token invalide
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "500":
          description: Erreur interne
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
      security:
      - BearerAuth: []
      summary: Met à jour la propriété done d'une task spécifique de l'utilisateur
        connecté
      tags:
      - task
  /task/{id}/label/user:
    put:
      consumes:
      - application/json
      description: Met à jour la propriété `label` de la task indiquée appartenant
        à l'utilisateur authentifié via le token dans le header
      parameters:
      - description: ID de la task à modifier
        in: path
        name: id
        required: true
        type: string
      - description: Label de mise à jour
        in: body
        name: label
        required: true
        schema:
          $ref: '#/definitions/task.TaskUpdateLabelDto'
      produces:
      - application/json
      responses:
        "200":
          description: Tâche mise à jour avec succès
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "401":
          description: Token invalide
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "500":
          description: Erreur interne
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
      security:
      - BearerAuth: []
      summary: Met à jour le label d'une task spécifique de l'utilisateur connecté
      tags:
      - task
  /task/{id}/user:
    delete:
      description: Supprime la task indiqué de l'utilisateur authentifié via le token
        dans le header
      parameters:
      - description: ID de la task à supprimer
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tâche supprimée avec succès
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "401":
          description: Token invalide
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "500":
          description: Erreur interne
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
      security:
      - BearerAuth: []
      summary: Supprime une task spécifique de l'utilisateur connecté
      tags:
      - task
  /task/delete/all:
    delete:
      description: Supprime les tâches par un utilisateur avec role = admin
      produces:
      - application/json
      responses:
        "200":
          description: X tâches supprimés
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "401":
          description: Token invalide
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "500":
          description: Erreur interne
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
      security:
      - BearerAuth: []
      summary: Supprime les tâches par un admin
      tags:
      - admin
  /task/delete/tasks:
    post:
      description: Supprime la ou les tâche(s) indiqué par un utilisateur avec role
        = admin
      parameters:
      - description: Ids des tâches à supprimer
        in: body
        name: ids
        required: true
        schema:
          $ref: '#/definitions/task.TaskDeleteManyDto'
      produces:
      - application/json
      responses:
        "200":
          description: X tâches supprimés
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "401":
          description: Token invalide
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "500":
          description: Erreur interne
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
      security:
      - BearerAuth: []
      summary: Supprime une ou plusieurs tâche(s) spécifique par un admin
      tags:
      - admin
  /task/delete/user:
    post:
      description: Supprime la ou les task(s) indiqué de l'utilisateur authentifié
        via le token dans le header
      parameters:
      - description: Ids des tasks à supprimer
        in: body
        name: ids
        required: true
        schema:
          $ref: '#/definitions/task.TaskDeleteManyDto'
      produces:
      - application/json
      responses:
        "200":
          description: Les tâches ont été supprimées avec succès
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "401":
          description: Token invalide
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "500":
          description: Erreur interne
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
      security:
      - BearerAuth: []
      summary: Supprime une ou plusieurs task(s) spécifique de l'utilisateur connecté
      tags:
      - task
  /user:
    delete:
      description: Supprime l'utilisateur connecté via le token utilisé dans le header
      produces:
      - application/json
      responses:
        "204":
          description: "1"
        "401":
          description: Token invalide
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "500":
          description: Erreur interne
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
      security:
      - BearerAuth: []
      summary: Supprime l'utilisateur connecté
      tags:
      - user
  /user/login:
    post:
      consumes:
      - application/json
      description: Authentification d’un utilisateur
      parameters:
      - description: DTO d'authentification utilisateur
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.UserLoginDto'
      produces:
      - application/json
      responses:
        "200":
          description: Connexion réussie
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "400":
          description: Erreur de validation
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "500":
          description: Erreur d'authentification
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
      summary: Authentifier un utilisateur
      tags:
      - user
  /user/profil:
    get:
      description: Récupére le profil de l'utilisateur connecté via le token utilisé
        dans le header
      produces:
      - application/json
      responses:
        "200":
          description: Profil utilisateur récupéré avec succès
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "401":
          description: Token invalide
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "500":
          description: Erreur interne
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
      security:
      - BearerAuth: []
      summary: Récupérer le profil de l'utilisateur connecté
      tags:
      - user
  /user/register:
    post:
      consumes:
      - application/json
      description: Création d’un nouvel utilisateur
      parameters:
      - description: DTO d'inscription utilisateur
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.UserCreateDto'
      produces:
      - application/json
      responses:
        "200":
          description: Utilisateur créé avec succès
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "400":
          description: Erreur de validation
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "500":
          description: Erreur interne
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
      summary: Créer un utilisateur
      tags:
      - user
  /user/users:
    post:
      description: Supprime le ou les utilisateur(s) indiqué par un utilisateur avec
        role = admin
      parameters:
      - description: Ids des utilisateurs à supprimer
        in: body
        name: ids
        required: true
        schema:
          $ref: '#/definitions/auth.UserDeleteDto'
      produces:
      - application/json
      responses:
        "200":
          description: X utilisateurs supprimés
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "401":
          description: Token invalide
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "500":
          description: Erreur interne
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
      security:
      - BearerAuth: []
      summary: Supprime un ou plusieurs utilisateur(s) spécifique par un admin
      tags:
      - admin
  /user/users/all:
    delete:
      description: Supprime les utilisateurs par un utilisateur avec role = admin
      produces:
      - application/json
      responses:
        "200":
          description: X utilisateurs supprimés
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "401":
          description: Token invalide
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
        "500":
          description: Erreur interne
          schema:
            $ref: '#/definitions/ginresponse.JsonFormatterSwag'
      security:
      - BearerAuth: []
      summary: Supprime les utilisateurs par un admin
      tags:
      - admin
schemes:
- https
securityDefinitions:
  BearerAuth:
    in: headers
    name: Authorization
    type: apiKey
swagger: "2.0"
