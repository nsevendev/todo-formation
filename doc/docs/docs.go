// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/user/login": {
            "post": {
                "description": "Authentifie un utilisateur et retourne un token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Connexion utilisateur",
                "parameters": [
                    {
                        "description": "Identifiants de l'utilisateur",
                        "name": "userLoginDto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.UserLoginDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Connexion réussie"
                    },
                    "400": {
                        "description": "Erreur de validation"
                    },
                    "500": {
                        "description": "Erreur serveur"
                    }
                }
            }
        },
        "/user/profil": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retourne les informations du profil de l'utilisateur actuellement authentifié",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Récupérer le profil de l'utilisateur connecté",
                "responses": {
                    "200": {
                        "description": "Profil utilisateur récupéré avec succès",
                        "schema": {
                            "$ref": "#/definitions/auth.UserCreateDto"
                        }
                    },
                    "401": {
                        "description": "Invalide token"
                    },
                    "500": {
                        "description": "Erreur serveur"
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "description": "Crée un nouvel utilisateur avec les informations fournies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Créer un utilisateur",
                "parameters": [
                    {
                        "description": "DTO de l'utilisateur à créer",
                        "name": "userCreateDto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.UserCreateDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Utilisateur créé avec succès"
                    },
                    "400": {
                        "description": "Erreur de validation"
                    },
                    "500": {
                        "description": "Impossible de créer votre compte"
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.UserCreateDto": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "auth.UserLoginDto": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Entrez le token JWT avec le préfixe 'Bearer ' dans l'en-tête Authorization",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "API todo",
	Description:      "API pour la création de todo avec utilisateurs",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
