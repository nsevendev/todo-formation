basePath: /api/v1
definitions:
  auth.UserCreateDto:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  auth.UserLoginDto:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API pour la création de todo avec utilisateurs
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: API todo
  version: "1.0"
paths:
  /user/login:
    post:
      consumes:
      - application/json
      description: Authentifie un utilisateur et retourne un token
      parameters:
      - description: Identifiants de l'utilisateur
        in: body
        name: userLoginDto
        required: true
        schema:
          $ref: '#/definitions/auth.UserLoginDto'
      produces:
      - application/json
      responses:
        "200":
          description: Connexion réussie
        "400":
          description: Erreur de validation
        "500":
          description: Erreur serveur
      summary: Connexion utilisateur
      tags:
      - user
  /user/profil:
    get:
      description: Retourne les informations du profil de l'utilisateur actuellement
        authentifié
      produces:
      - application/json
      responses:
        "200":
          description: Profil utilisateur récupéré avec succès
          schema:
            $ref: '#/definitions/auth.UserCreateDto'
        "401":
          description: Invalide token
        "500":
          description: Erreur serveur
      security:
      - BearerAuth: []
      summary: Récupérer le profil de l'utilisateur connecté
      tags:
      - user
  /user/register:
    post:
      consumes:
      - application/json
      description: Crée un nouvel utilisateur avec les informations fournies
      parameters:
      - description: DTO de l'utilisateur à créer
        in: body
        name: userCreateDto
        required: true
        schema:
          $ref: '#/definitions/auth.UserCreateDto'
      produces:
      - application/json
      responses:
        "204":
          description: Utilisateur créé avec succès
        "400":
          description: Erreur de validation
        "500":
          description: Impossible de créer votre compte
      summary: Créer un utilisateur
      tags:
      - user
securityDefinitions:
  BearerAuth:
    description: Entrez le token JWT avec le préfixe 'Bearer ' dans l'en-tête Authorization
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
